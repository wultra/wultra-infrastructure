on:
  workflow_call:
    secrets:
      username:
        required: true
      password:
        required: true
      gpg_passphrase:
        required: false
      gpg_key:
        required: false
    inputs:
      environment:
        type: string
        description: environment running the deploy maven-publish for using public maven repo and internal-publish for using internal one
        required: true
      release_type:
        type: string
        description: choice of release type (snapshot / release)
        default: snapshot
      directory_path:
        type: string
        description: directory with pom.xml to be executed
        default: .

jobs:
  maven-deploy:
    name: Deploy to ${{ inputs.environment }}
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest



    steps:
      - uses: actions/checkout@v3
      - name: Set environment
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          RELEASE_TYPE: ${{ inputs.release_type }}
        # Based on environment and release type of deploy we pick a distribution server - better than setup 3-4 different environments per repository
        run: |
          echo "$ENVIRONMENT:$RELEASE_TYPE"
          if [ "$ENVIRONMENT" == "maven-publish" ]; then
            if [ "$RELEASE_TYPE" == "release" ]; then
              echo "setting server to ossrh-staging-distribution"
              echo "server_id=ossrh-staging-distribution" >> $GITHUB_ENV
            elif [ "$RELEASE_TYPE" == "snapshot" ]; then
              echo "setting server to ossrh-snapshots-distribution"
              echo "server_id=ossrh-snapshots-distribution" >> $GITHUB_ENV
            fi
          elif [ "$ENVIRONMENT" == "internal-publish" ]; then
            echo "setting server to internal"
            echo "server_id=jfrog-central" >> $GITHUB_ENV
          fi

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
          server-id: ${{ env.server_id }}
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
      - name: Publish Libraries to ${{ env.server_id }}
        run: |
          cd ${{ inputs.directory_path }}
          if [ "$ENVIRONMENT" == "internal-publish" ]; then
            echo "running internal deploy"
            cat <(echo -e "${{ secrets.gpg_key }}") | gpg --batch --import          
            mvn -B \
              --no-transfer-progress \          
              deploy -DuseInternalRepo=true \
              -Dgpg.passphrase=${{ secrets.gpg_passphrase }}
          elif [ "$ENVIRONMENT" == "maven-publish" ]; then
            echo "running oss deploy"
            if [ "$RELEASE_TYPE" == "release" ]; then
              cat <(echo -e "${{ secrets.gpg_key }}") | gpg --batch --import
              mvn -B \
                --no-transfer-progress \
                -Dgpg.passphrase=${{ secrets.gpg_passphrase }} \
                deploy
            elif [ "$RELEASE_TYPE" == "snapshot" ]; then
              mvn -B deploy
            fi          
          fi
        env:
          MAVEN_USERNAME: ${{ secrets.username }}
          MAVEN_PASSWORD: ${{ secrets.password }}
          ENVIRONMENT: ${{ inputs.environment }}
      - run: |
          mkdir lib
          mkdir war
          cp **/target/*.jar lib 2>/dev/null || :
          cp **/target/*.war war 2>/dev/null || :
      - name: Publish JAR Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Library Artifacts
          path: 'lib/*.jar'
          if-no-files-found: ignore
      - name: Publish WAR Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Application Artifacts
          path: 'war/*.war'
          if-no-files-found: ignore

